// Generated by Dagger (https://google.github.io/dagger).
package com.deeshant.deeshantsbnri.di.component;

import androidx.lifecycle.LifecycleRegistry;
import com.deeshant.deeshantsbnri.di.module.ViewHolderModule;
import com.deeshant.deeshantsbnri.di.module.ViewHolderModule_ProvideLifecycleRegistryFactory;
import com.deeshant.deeshantsbnri.ui.base.BaseItemViewHolder_MembersInjector;
import com.deeshant.deeshantsbnri.ui.dummies.DummyItemViewHolder;
import com.deeshant.deeshantsbnri.ui.dummies.DummyItemViewModel;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerViewHolderComponent implements ViewHolderComponent {
  private final ApplicationComponent applicationComponent;

  private Provider<LifecycleRegistry> provideLifecycleRegistryProvider;

  private DaggerViewHolderComponent(
      ViewHolderModule viewHolderModuleParam, ApplicationComponent applicationComponentParam) {
    this.applicationComponent = applicationComponentParam;
    initialize(viewHolderModuleParam, applicationComponentParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private DummyItemViewModel getDummyItemViewModel() {
    return new DummyItemViewModel(
        Preconditions.checkNotNull(
            applicationComponent.getSchedulerProvider(),
            "Cannot return null from a non-@Nullable component method"),
        Preconditions.checkNotNull(
            applicationComponent.getCompositeDisposable(),
            "Cannot return null from a non-@Nullable component method"),
        Preconditions.checkNotNull(
            applicationComponent.getNetworkHelper(),
            "Cannot return null from a non-@Nullable component method"),
        Preconditions.checkNotNull(
            applicationComponent.getDatabaseService(),
            "Cannot return null from a non-@Nullable component method"));
  }

  @SuppressWarnings("unchecked")
  private void initialize(
      final ViewHolderModule viewHolderModuleParam,
      final ApplicationComponent applicationComponentParam) {
    this.provideLifecycleRegistryProvider =
        DoubleCheck.provider(
            ViewHolderModule_ProvideLifecycleRegistryFactory.create(viewHolderModuleParam));
  }

  @Override
  public void inject(DummyItemViewHolder viewHolder) {
    injectDummyItemViewHolder(viewHolder);
  }

  private DummyItemViewHolder injectDummyItemViewHolder(DummyItemViewHolder instance) {
    BaseItemViewHolder_MembersInjector.injectViewModel(instance, getDummyItemViewModel());
    BaseItemViewHolder_MembersInjector.injectLifecycleRegistry(
        instance, provideLifecycleRegistryProvider.get());
    return instance;
  }

  public static final class Builder {
    private ViewHolderModule viewHolderModule;

    private ApplicationComponent applicationComponent;

    private Builder() {}

    public Builder viewHolderModule(ViewHolderModule viewHolderModule) {
      this.viewHolderModule = Preconditions.checkNotNull(viewHolderModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }

    public ViewHolderComponent build() {
      Preconditions.checkBuilderRequirement(viewHolderModule, ViewHolderModule.class);
      Preconditions.checkBuilderRequirement(applicationComponent, ApplicationComponent.class);
      return new DaggerViewHolderComponent(viewHolderModule, applicationComponent);
    }
  }
}
