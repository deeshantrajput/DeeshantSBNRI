// Generated by Dagger (https://google.github.io/dagger).
package com.deeshant.deeshantsbnri.di.module;

import com.deeshant.deeshantsbnri.data.local.db.DatabaseService;
import com.deeshant.deeshantsbnri.data.repository.DummyRepository;
import com.deeshant.deeshantsbnri.ui.dummy.DummyViewModel;
import com.deeshant.deeshantsbnri.utils.network.NetworkHelper;
import com.deeshant.deeshantsbnri.utils.rx.SchedulerProvider;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import io.reactivex.disposables.CompositeDisposable;
import javax.inject.Provider;

public final class ActivityModule_ProvideDummyViewModelFactory implements Factory<DummyViewModel> {
  private final ActivityModule module;

  private final Provider<SchedulerProvider> schedulerProvider;

  private final Provider<CompositeDisposable> compositeDisposableProvider;

  private final Provider<NetworkHelper> networkHelperProvider;

  private final Provider<DatabaseService> databaseProvider;

  private final Provider<DummyRepository> dummyRepositoryProvider;

  public ActivityModule_ProvideDummyViewModelFactory(
      ActivityModule module,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider,
      Provider<NetworkHelper> networkHelperProvider,
      Provider<DatabaseService> databaseProvider,
      Provider<DummyRepository> dummyRepositoryProvider) {
    this.module = module;
    this.schedulerProvider = schedulerProvider;
    this.compositeDisposableProvider = compositeDisposableProvider;
    this.networkHelperProvider = networkHelperProvider;
    this.databaseProvider = databaseProvider;
    this.dummyRepositoryProvider = dummyRepositoryProvider;
  }

  @Override
  public DummyViewModel get() {
    return proxyProvideDummyViewModel(
        module,
        schedulerProvider.get(),
        compositeDisposableProvider.get(),
        networkHelperProvider.get(),
        databaseProvider.get(),
        dummyRepositoryProvider.get());
  }

  public static ActivityModule_ProvideDummyViewModelFactory create(
      ActivityModule module,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider,
      Provider<NetworkHelper> networkHelperProvider,
      Provider<DatabaseService> databaseProvider,
      Provider<DummyRepository> dummyRepositoryProvider) {
    return new ActivityModule_ProvideDummyViewModelFactory(
        module,
        schedulerProvider,
        compositeDisposableProvider,
        networkHelperProvider,
        databaseProvider,
        dummyRepositoryProvider);
  }

  public static DummyViewModel proxyProvideDummyViewModel(
      ActivityModule instance,
      SchedulerProvider schedulerProvider,
      CompositeDisposable compositeDisposable,
      NetworkHelper networkHelper,
      DatabaseService database,
      DummyRepository dummyRepository) {
    return Preconditions.checkNotNull(
        instance.provideDummyViewModel(
            schedulerProvider, compositeDisposable, networkHelper, database, dummyRepository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
