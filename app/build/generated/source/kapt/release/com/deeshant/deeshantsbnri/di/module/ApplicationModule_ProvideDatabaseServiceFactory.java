// Generated by Dagger (https://google.github.io/dagger).
package com.deeshant.deeshantsbnri.di.module;

import com.deeshant.deeshantsbnri.data.local.db.DatabaseService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;

public final class ApplicationModule_ProvideDatabaseServiceFactory
    implements Factory<DatabaseService> {
  private final ApplicationModule module;

  public ApplicationModule_ProvideDatabaseServiceFactory(ApplicationModule module) {
    this.module = module;
  }

  @Override
  public DatabaseService get() {
    return proxyProvideDatabaseService(module);
  }

  public static ApplicationModule_ProvideDatabaseServiceFactory create(ApplicationModule module) {
    return new ApplicationModule_ProvideDatabaseServiceFactory(module);
  }

  public static DatabaseService proxyProvideDatabaseService(ApplicationModule instance) {
    return Preconditions.checkNotNull(
        instance.provideDatabaseService(),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
