// Generated by Dagger (https://google.github.io/dagger).
package com.deeshant.deeshantsbnri.di.module;

import com.deeshant.deeshantsbnri.data.local.db.DatabaseService;
import com.deeshant.deeshantsbnri.ui.splash.SplashViewModel;
import com.deeshant.deeshantsbnri.utils.network.NetworkHelper;
import com.deeshant.deeshantsbnri.utils.rx.SchedulerProvider;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import io.reactivex.disposables.CompositeDisposable;
import javax.inject.Provider;

public final class ActivityModule_ProvideSplashViewModelFactory
    implements Factory<SplashViewModel> {
  private final ActivityModule module;

  private final Provider<SchedulerProvider> schedulerProvider;

  private final Provider<CompositeDisposable> compositeDisposableProvider;

  private final Provider<NetworkHelper> networkHelperProvider;

  private final Provider<DatabaseService> databaseProvider;

  public ActivityModule_ProvideSplashViewModelFactory(
      ActivityModule module,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider,
      Provider<NetworkHelper> networkHelperProvider,
      Provider<DatabaseService> databaseProvider) {
    this.module = module;
    this.schedulerProvider = schedulerProvider;
    this.compositeDisposableProvider = compositeDisposableProvider;
    this.networkHelperProvider = networkHelperProvider;
    this.databaseProvider = databaseProvider;
  }

  @Override
  public SplashViewModel get() {
    return proxyProvideSplashViewModel(
        module,
        schedulerProvider.get(),
        compositeDisposableProvider.get(),
        networkHelperProvider.get(),
        databaseProvider.get());
  }

  public static ActivityModule_ProvideSplashViewModelFactory create(
      ActivityModule module,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider,
      Provider<NetworkHelper> networkHelperProvider,
      Provider<DatabaseService> databaseProvider) {
    return new ActivityModule_ProvideSplashViewModelFactory(
        module,
        schedulerProvider,
        compositeDisposableProvider,
        networkHelperProvider,
        databaseProvider);
  }

  public static SplashViewModel proxyProvideSplashViewModel(
      ActivityModule instance,
      SchedulerProvider schedulerProvider,
      CompositeDisposable compositeDisposable,
      NetworkHelper networkHelper,
      DatabaseService database) {
    return Preconditions.checkNotNull(
        instance.provideSplashViewModel(
            schedulerProvider, compositeDisposable, networkHelper, database),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
